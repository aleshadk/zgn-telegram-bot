import { Context, Markup } from 'telegraf';

import { UserRepository } from '../Domain/User/user.repository';
import { BookRehearsalHandler } from '../handlers/rehearsal-booking/book-rehearsal.handler';
import {
    GetAvailableRehearsalDuractionHandler,
} from '../handlers/rehearsal-booking/get-available-rehearsal-duration.handler';
import {
    GetAvailableRehearsalStateDatesHandler,
} from '../handlers/rehearsal-booking/get-available-rehearsal-start-dates.handler';
import {
    GetAvailableRehearsalStartTimeSlotsHandler,
} from '../handlers/rehearsal-booking/get-available-rehearsal-start-time-slots.handler';
import { ConfirmRehearsalHandler } from '../handlers/rehearsal-confirmation/confirm-rehearsal.handler';
import { RejectRehearsalHandler } from '../handlers/rehearsal-confirmation/reject-rehearsal.handler';
import {
    SendRehearsalConfirmationMessageToAdminsHandler,
} from '../handlers/rehearsal-confirmation/send-rehearsal-confirmation-message-to-admins.handler';
import { GetMyRehearsalsHandler } from '../handlers/user/get-my-rehearsals.handler';
import { isValidPhone } from '../utils/phoneUtils';
import { telegramBot } from './telegramBot';

export class TelegramBot { // TODO: rename class
    private readonly userRepository = new UserRepository();
    constructor() {
        telegramBot.start(async (ctx) => {
            let user = await this.userRepository.getUser({ telegramId: ctx.from.id });
            console.log(ctx.chat.id);

            if (user) {
                if (user.phone) {
                    ctx.reply(`${user.firstName} –≤—Å—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!`);
                    return;
                }

                this.handleMessageFromUserWithoutPhone(ctx);
                return;
            }

            if (!user) {
                user = await this.userRepository.createUser({
                    firstName: ctx.from.first_name,
                    isAdmin: false,
                    lastName: ctx.from.last_name,
                    telegramId: ctx.from.id,
                    telegramName: ctx.from.username,
                    telegramChatId: ctx.chat.id
                });
            }

            ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${user.firstName}!`);
            this.handleMessageFromUserWithoutPhone(ctx);
        });

        telegramBot.command('start_booking', async (ctx) => {
            const daysToSchedule = new GetAvailableRehearsalStateDatesHandler().handle();

            await ctx.reply('–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å —Ä–µ–ø–µ—Ç–∏—Ü–∏–∏', {
                reply_markup: {
                    inline_keyboard: [
                        ...daysToSchedule.map(x => {
                            return [
                                Markup.button.callback(x.label, `datechosen__${x.value.getTime()}`, true)
                            ]
                        })
                    ]
                }
            });
        });

        telegramBot.command('get_my_rehearsals', async ctx => {
            const result = await new GetMyRehearsalsHandler().handle(ctx.from?.id!);

            if (result.length === 0) {
                ctx.reply('–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–ø–µ—Ç–∏—Ü–∏–π üò±');
                return;
            }

            const response = `–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ—Ç —Ç–∞–∫–∏–µ —Ä–µ–ø–µ—Ç–∏—Ü–∏–∏: \n\n${result.map(x => x.label).join('\n')}`;

            ctx.reply(response);
        });

        // datechosen__{{date.getTime()}}
        telegramBot.action(/datechosen+/, (ctx) => {
            const date = ctx.match.input.replace('datechosen__', '');
            const durations = new GetAvailableRehearsalDuractionHandler().handle();

            ctx.reply("–í—ã–±–µ—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–ø–µ—Ç–∏—Ü–∏–∏", {
                reply_markup: {
                    inline_keyboard: [
                        ...durations.map(x => {
                            return [
                                Markup.button.callback(`${x} —á.`, `durationchosen__${date}__${x}`, true)
                            ]
                        })
                    ]
                }
            });
        });

        // datechosen__{{date.getTime()}}__{{–¥–ª–∏—Ç—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–ø–µ—Ç–∏—Ü–∏–∏ –≤ —á–∞—Å–∞—Ö (number)}}
        telegramBot.action(/durationchosen+/, async (ctx) => {
            const data = ctx.match.input.replace('durationchosen__', '');
            const [rehearsalDate, duration] = data.split('__');

            const slots = await new GetAvailableRehearsalStartTimeSlotsHandler().handle({rehearsalDate, duration});

            if (slots.length === 0) {
                ctx.reply('–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤ :(');
                return;
            }

            ctx.reply("–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–µ–ø–µ—Ç–∏—Ü–∏–∏", {
                reply_markup: {
                    inline_keyboard: [
                        ...slots.map(x => {
                            return [
                                Markup.button.callback(`${x}`, `slotchosen__${rehearsalDate}__${duration}__${x}`, true)
                            ]
                        })
                    ]
                }
            });
        });

        // TODO: –Ω—É–∂–Ω–æ –≤–µ–∑–¥–µ –¥–µ–ª–∞—Ç—å JSON –∏ –¥–µ–ª–∞—Ç—å –º–∞–ø–ø–µ—Ä –∏–∑ –¥–∂–µ–π—Å–æ–Ω–∞ –≤ –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ null 
        telegramBot.action(/slotchosen+/, async ctx => {
            const data = ctx.match.input.replace('slotchosen__', '');
            const [rehearsalDate, duration, startTime] = data.split('__');

            const result = await new BookRehearsalHandler().handle({
                duration,
                rehearsalDate,
                startTime,
                userTelegramId: ctx.from?.id!
            });

            ctx.reply(result.message);
            if (result.rehearsal) {
                await new SendRehearsalConfirmationMessageToAdminsHandler().handle(telegramBot, result.rehearsal);
            }
        });

        telegramBot.action(/rehearsal_confirmed+/, async ctx => {
            const rehearsalId = ctx.match.input.replace('rehearsal_confirmed__', '');
            new ConfirmRehearsalHandler().handle(ctx, telegramBot, rehearsalId);
        });

        telegramBot.action(/rehearsal_rejected+/, async ctx => {
            const rehearsalId = ctx.match.input.replace('rehearsal_rejected__', '');
            new RejectRehearsalHandler().handle(ctx, telegramBot, rehearsalId);
        });

        telegramBot.on('text', async (ctx) => {
            const user = await this.userRepository.getUser({ telegramId: ctx.from.id });

            if (!user?.phone) {
                if (isValidPhone(ctx.message.text)) {
                    await this.userRepository.update({ telegramId: ctx.from.id, phone: ctx.message.text });
                    ctx.reply(`${ctx.from.first_name} –≤—Å—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!`);
                    return;
                }

                this.handleMessageFromUserWithoutPhone(ctx);
                return;
            }

            ctx.reply(`${ctx.from.first_name} –≤—Å—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!`);
        });

        telegramBot.launch();
    }

    private handleMessageFromUserWithoutPhone(ctx: Context): void {
        ctx.telegram.sendMessage(ctx.message!.chat.id, `${ctx.from?.first_name}, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω`);
    }
}