import { Context } from 'telegraf';

import { UserRepository } from '../../Domain/User/user.repository';

class TelegramStartCommandHandler {
    private readonly userRepository = new UserRepository;;


    public async handle(ctx: Context): Promise<void> {
        const fromId = ctx.from!.id!;

        let user = await this.userRepository.getUser({ telegramId: fromId });

        if (!user) {
            await this.processNewUser(ctx);
            ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${ctx.from!.first_name}! –ú—ã –¥–æ–±–∞–≤–∏–ª–∏ —Ç–µ–±—è –≤ —Å–∏—Å—Ç–µ–º—É, –Ω–æ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞`);
            return;
        }

        if (user && !user.phone) {
            this.handleMessageFromUserWithoutPhone(ctx);
            return;
        }

        ctx.reply(`–£ —Ç–µ–±—è –≤—Å—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ ü§ü`);
    }

    private async processNewUser(ctx: Context): Promise<void> {
        await this.userRepository.createUser({
            firstName: ctx.from!.first_name,
            isAdmin: false,
            lastName: ctx.from!.last_name,
            telegramId: ctx.from!.id,
            telegramName: ctx.from!.username,
            telegramChatId: ctx.chat!.id
        });
    }

    private handleMessageFromUserWithoutPhone(ctx: Context): void {
        ctx.telegram.sendMessage(ctx.message!.chat.id, `–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞`);
    }
}

export function handleTelegramStartCommand(ctx: Context): Promise<void> {
    return new TelegramStartCommandHandler().handle(ctx);
}